(* Problem 1: First Duplicate in a List *)
(*first_duplicate of a list returns -10000 if there are no duplicates 
in the integer list argument. Otherwise the first item that occurs 
more than once (duplicate) in the integer list is returned. 
 
Signature:  
 
val first_duplicate : int list -> int = <fun> *)
let rec first_duplicate = function alist ->
  if List.mem (List.hd alist) (List.tl alist) == true then List.hd alist
  else
  if List.tl alist == [] then -10000
  else
    first_duplicate (List.tl alist);;

(* Problem 2: First Non-Repeating Element in a List *)
(* Helper Function - After calling List.tl, this function checks to see if the given list is of size one, 
i.e. the list is soon to be empty *)
let rec non_repeat_helper list duplicate_list = 
  if list = [] then
    -1000
  else
  if List.mem(List.hd list)(List.tl list) || List.mem(List.hd list)(duplicate_list) then
    non_repeat_helper(List.tl list)(List.hd list::duplicate_list)
  else
    (List.hd list);;
(* Prototype: first_nonrepeating of a list returns -10000 if there are 
no non-repeated (non-duplicated) element in the list. Otherwise it 
returns the first non-repeating element in the integer list. 
 
Signature:  
 
val first_nonrepeating : int list -> int = <fun>  *)
let rec first_nonrepeating = function(list) ->
  non_repeat_helper list [];;

(* Problem Three: The Sum of 2 Problem *)
(* Prototype: sumOfTwo(a,b,v) returns false if there does not exdist 
and integer in a, which added to any integer in b, equals v.  If 
there is an integer in a, and an integer in b that sum to v, return 
true. 
 
Signature:  
 
val sumOfTwo : int list * int list * int -> bool = <fun> *)
let rec sumOfTwo = function (a,b,v) ->
  if a == [] || b == [] then false
  else
  if List.hd a + List.hd b == v then true
  else sumOfTwo(List.tl a, b, v) || sumOfTwo(a, List.tl b, v);;

(* Problem Four: CYK Parsing Algorithm-Inspired Problem *)

(* Helper Function - sublist_decr n , n = initial list value, continues to 1 *)
let rec sublist_decr = function n ->
  if n>1 then (n-1)::sublist_decr(n-1) else [];;

(* Helper Function - sublist_incr (i,n), i = initial list value and n = length of list *)
let rec sublist_incr = function (i,n) ->
  if n > 1 then i::sublist_incr(i+1,n-1) else [];;

(* Helper Function - set alista alistb, concatenates two lists alista alistb -> (a, b) *)
let rec set a_list_a a_list_b =
  match a_list_a, a_list_b with
  | [], _ -> []
  | _, [] -> []
  | hd :: tl, hd2 :: tl2 -> (hd, hd2) :: (set tl tl2)

(* Prototpe: cyk_sublists n returns all of the positive integer pairs 
 x and y that add up to n.  Pairs are returned as tuples.  Argument 
n must be larger than 1, otherwise return [] 
 
Signature:  
 
val cyk_sublists : int -> (int * int) list = <fun> *)
let rec cyk_sublists = function n ->
  (set (sublist_incr(1,n)) (sublist_decr(n)));;