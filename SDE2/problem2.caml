(* Problem 2: First Non-Repeating Element in a List *)
(* Helper Function - After calling List.tl, this function checks to see if the given list is of size one, 
i.e. the list is soon to be empty *)
let rec non_repeat_helper list duplicate_list = 
  if list = [] then
    -1000
  else
  if List.mem(List.hd list)(List.tl list) || List.mem(List.hd list)(duplicate_list) then
    non_repeat_helper(List.tl list)(List.hd list::duplicate_list)
  else
    (List.hd list);;
(* Prototype: first_nonrepeating of a list returns -10000 if there are 
no non-repeated (non-duplicated) element in the list. Otherwise it 
returns the first non-repeating element in the integer list. 
 
Signature:  
 
val first_nonrepeating : int list -> int = <fun>  *)
let rec first_nonrepeating = function(list) ->
  non_repeat_helper list [];;